@model BucuriaDarului.Contexts.EventsMainDisplayIndexResponse
@{
    ViewBag.Title = "Events";
}
@inject IViewLocalizer Localizer
@using Microsoft.AspNetCore.Mvc.Localization
<head>
    <style>

        .pagination {
            display: inline-block;
            width: 800px;
        }

            .pagination a {
                color: black;
                float: left;
                padding: 8px 16px;
                text-decoration: none;
                border-radius: 5px;
                border: 1px solid #ddd;
                transition: background-color .3s;
            }
        .dropdown-menu {
            width: 500px !important;
        }

                .pagination a.active {
                    background-color: red;
                    color: red;
                    border-radius: 5px;
                }

                .pagination a:hover:not(.active) {
                    background-color: #ddd;
                }

                .pagination a:current {
                    background-color: red;
                }

                .pagination a:first-child {
                    border-top-left-radius: 5px;
                    border-bottom-left-radius: 5px;
                }

                .pagination a:last-child {
                    border-top-right-radius: 5px;
                    border-bottom-right-radius: 5px;
                }

        .scrollable-menu {
            height: auto;
            max-height: 200px;
            overflow-x: hidden;
        }
    </style>
</head>

<h2>
    @Localizer["Events"] <small> (@Model.TotalEvents)</small>
</h2>

@using (Html.BeginForm("Index", "Event", FormMethod.Get))
{

    <a href=@Url.Action( "Create")><img src="~/Resources/new_event.png" width="40" height="40" title=@Localizer["CreateNew"]></a>

    <a href=@Url.Action("CSVSaver", new { stringOfIDs = Model.StringOfIDs })><img src="~/Resources/csv.png" width="40" height="40" title=@Localizer["ExportToCsv"]></a>

    <a href=@Url.Action( "Import")><img src="~/Resources/import-csv.png" width="40" height="40" title=@Localizer["UploadFromCsv"]></a>
    <br />

    <p>
        <div class="pagination">
            <pre style="white-space:pre-wrap;">
            @{
                int maxpage = (Model.TotalEvents / Model.PagingData.NrOfDocumentsPerPage) + 1;
                if (Model.TotalEvents % Model.PagingData.NrOfDocumentsPerPage == 0 && Model.TotalEvents != 0)
                {
                    maxpage--;
                }

                if(Model.PagingData.CurrentPage==1)
                {
                    @Html.ActionLink("1", "Index", new { page = 1, searching = Model.FilterData.NameOfEvent, searchingPlace= Model.FilterData.PlaceOfEvent, searchingActivity = Model.FilterData.TypeOfActivites , searchingType= Model.FilterData.TypeOfEvent ,  searchingVolunteers = Model.FilterData.AllocatedVolunteers, searchingSponsor= Model.FilterData.AllocatedSponsors, lowerdate = Model.FilterData.LowerDate, upperdate = Model.FilterData.UpperDate }, new { Style = "background-color:lightgray;  color:black; border-radius: 5px;" })
                }
                else
                {
                    @Html.ActionLink("1", "Index", new { page = 1, searching = Model.FilterData.NameOfEvent, searchingPlace = Model.FilterData.PlaceOfEvent, searchingActivity = Model.FilterData.TypeOfActivites, searchingType = Model.FilterData.TypeOfEvent, searchingVolunteers = Model.FilterData.AllocatedVolunteers, searchingSponsor = Model.FilterData.AllocatedSponsors, lowerdate = Model.FilterData.LowerDate, upperdate = Model.FilterData.UpperDate })
                }
                if(Model.PagingData.CurrentPage>=5)
                {
                    @Html.ActionLink("<<", "Index", new { page = Model.PagingData.CurrentPage-1, searching = Model.FilterData.NameOfEvent, searchingPlace = Model.FilterData.PlaceOfEvent, searchingActivity = Model.FilterData.TypeOfActivites, searchingType = Model.FilterData.TypeOfEvent, searchingVolunteers = Model.FilterData.AllocatedVolunteers, searchingSponsor = Model.FilterData.AllocatedSponsors, lowerdate = Model.FilterData.LowerDate, upperdate = Model.FilterData.UpperDate })
                }
                if(Model.PagingData.CurrentPage>3)
                {
                    @Html.ActionLink((Model.PagingData.CurrentPage-2).ToString(), "Index", new { page = Model.PagingData.CurrentPage-2, searching = Model.FilterData.NameOfEvent,  searchingPlace = Model.FilterData.PlaceOfEvent, searchingActivity = Model.FilterData.TypeOfActivites, searchingType = Model.FilterData.TypeOfEvent, searchingVolunteers = Model.FilterData.AllocatedVolunteers, searchingSponsor = Model.FilterData.AllocatedSponsors, lowerdate = Model.FilterData.LowerDate, upperdate = Model.FilterData.UpperDate })
                }
                if(Model.PagingData.CurrentPage>2)
                {
                    @Html.ActionLink((Model.PagingData.CurrentPage-1).ToString(), "Index", new { page = Model.PagingData.CurrentPage-1, searching = Model.FilterData.NameOfEvent, searchingPlace = Model.FilterData.PlaceOfEvent, searchingActivity = Model.FilterData.TypeOfActivites, searchingType = Model.FilterData.TypeOfEvent, searchingVolunteers = Model.FilterData.AllocatedVolunteers, searchingSponsor = Model.FilterData.AllocatedSponsors, lowerdate = Model.FilterData.LowerDate, upperdate = Model.FilterData.UpperDate })
                }
                if(Model.PagingData.CurrentPage!=1 && Model.PagingData.CurrentPage!= maxpage)
                {
                    @Html.ActionLink(Model.PagingData.CurrentPage.ToString(), "Index", new { page = Model.PagingData.CurrentPage, searching = Model.FilterData.NameOfEvent, searchingPlace = Model.FilterData.PlaceOfEvent, searchingActivity = Model.FilterData.TypeOfActivites, searchingType = Model.FilterData.TypeOfEvent, searchingVolunteers = Model.FilterData.AllocatedVolunteers, searchingSponsor = Model.FilterData.AllocatedSponsors, lowerdate = Model.FilterData.LowerDate, upperdate = Model.FilterData.UpperDate }, new { Style = "background-color:lightgray;  color:black; border-radius: 5px;" })
                }
                if(Model.PagingData.CurrentPage<maxpage-1)
                {
                    @Html.ActionLink((Model.PagingData.CurrentPage+1).ToString(), "Index", new { page = Model.PagingData.CurrentPage+1, searching = Model.FilterData.NameOfEvent, searchingPlace = Model.FilterData.PlaceOfEvent, searchingActivity = Model.FilterData.TypeOfActivites, searchingType = Model.FilterData.TypeOfEvent, searchingVolunteers = Model.FilterData.AllocatedVolunteers, searchingSponsor = Model.FilterData.AllocatedSponsors, lowerdate = Model.FilterData.LowerDate, upperdate = Model.FilterData.UpperDate })
                }
                if(Model.PagingData.CurrentPage<maxpage-2)
                {
                    @Html.ActionLink((Model.PagingData.CurrentPage+2).ToString(), "Index", new { page = Model.PagingData.CurrentPage+2, searching = Model.FilterData.NameOfEvent, searchingPlace = Model.FilterData.PlaceOfEvent, searchingActivity = Model.FilterData.TypeOfActivites, searchingType = Model.FilterData.TypeOfEvent, searchingVolunteers = Model.FilterData.AllocatedVolunteers, searchingSponsor = Model.FilterData.AllocatedSponsors, lowerdate = Model.FilterData.LowerDate, upperdate = Model.FilterData.UpperDate })
                }
                if(Model.PagingData.CurrentPage<maxpage-3)
                {
                    @Html.ActionLink(">>", "Index", new { page = Model.PagingData.CurrentPage+1, searching = Model.FilterData.NameOfEvent, searchingActivity = Model.FilterData.TypeOfActivites,  searchingPlace = Model.FilterData.PlaceOfEvent, searchingType = Model.FilterData.TypeOfEvent, searchingVolunteers = Model.FilterData.AllocatedVolunteers, searchingSponsor = Model.FilterData.AllocatedSponsors, lowerdate = Model.FilterData.LowerDate, upperdate = Model.FilterData.UpperDate })
                }
                 if(maxpage!=1 && Model.PagingData.CurrentPage==maxpage)
                {
                    @Html.ActionLink(maxpage.ToString(), "Index", new { page = maxpage, searching = Model.FilterData.NameOfEvent, searchingActivity = Model.FilterData.TypeOfActivites,  searchingPlace = Model.FilterData.PlaceOfEvent, searchingType = Model.FilterData.TypeOfEvent, searchingVolunteers = Model.FilterData.AllocatedVolunteers, searchingSponsor = Model.FilterData.AllocatedSponsors, lowerdate = Model.FilterData.LowerDate, upperdate = Model.FilterData.UpperDate }, new { Style = "background-color:lightgray;  color:black; border-radius: 5px;" })
                }
                else if (maxpage != 1)
                {
                    @Html.ActionLink(maxpage.ToString(), "Index", new { page = maxpage, searching = Model.FilterData.NameOfEvent, searchingActivity = Model.FilterData.TypeOfActivites, searchingPlace = Model.FilterData.PlaceOfEvent, searchingType = Model.FilterData.TypeOfEvent, searchingVolunteers = Model.FilterData.AllocatedVolunteers, searchingSponsor = Model.FilterData.AllocatedSponsors, lowerdate = Model.FilterData.LowerDate, upperdate = Model.FilterData.UpperDate })
                }
            }
            </pre>
        </div>
    </p>
}
@using (Html.BeginForm("Index", "Event", FormMethod.Get))
{<a href=@Url.Action( "Index" ) class="btn btn-primary">@Localizer["Show all events"]</a>
<br />

<br />
@if (Model.FilterData.NameOfEvent != "")
{
    <div class="badge badge-primary text-wrap" style="width: 10rem; background-color:lightgrey; color:black ">
        @Localizer["Nameofevent"]:@Model.FilterData.NameOfEvent
    </div>
}
@if (Model.FilterData.PlaceOfEvent != "")
{<div class="badge badge-primary text-wrap" style="width: 10rem; background-color:lightgrey; color:black ">
        @Localizer["Placeofevent"]:@Model.FilterData.PlaceOfEvent
    </div>
}
@if (Model.FilterData.TypeOfActivites != "")
{<div class="badge badge-primary text-wrap" style="width: 10rem; background-color:lightgrey; color:black ">
        @Localizer["Typeofactivities"]: @Model.FilterData.TypeOfActivites
    </div>
}
@if (Model.FilterData.TypeOfEvent != "")
{<div class="badge badge-primary text-wrap" style="width: 10rem; background-color:lightgrey; color:black ">
        @Localizer["Typeofevent"]:@Model.FilterData.TypeOfEvent
    </div>
}
@if (Model.FilterData.AllocatedVolunteers != "")
{<div class="badge badge-primary text-wrap" style="width: 10rem; background-color:lightgrey; color:black ">
        @Localizer["Allocatedvolunteers"]:@Model.FilterData.AllocatedVolunteers
    </div>
}
@if (Model.FilterData.AllocatedSponsors != "")
{<div class="badge badge-primary text-wrap" style="width: 10rem; background-color:lightgrey; color:black ">
        @Localizer["Allocatedsponsors"]:@Model.FilterData.AllocatedSponsors
    </div>
}
@if (Model.FilterData.LowerDate > DateTime.MinValue.AddYears(3))
{<div class="badge badge-primary text-wrap" style="width: 10rem; background-color:lightgrey; color:black ">
        @Localizer["Inntinf"]:@Model.FilterData.LowerDate
    </div>
}

@if (Model.FilterData.UpperDate > DateTime.MinValue.AddYears(3))
{<div class="badge badge-primary text-wrap" style="width: 10rem; background-color:lightgrey; color:black ">
        @Localizer["intsuo"]:@Model.FilterData.UpperDate
    </div>
}
<table class="table">
    <tr>
        <th>
            @Localizer["Nameofevent"]:

            @Html.TextBox("searching")
        </th>

        <th>
            @Localizer["Dateofevent"]:
        </th>
        <th>
            @Localizer["Numberofvolunteersneeded"]:
        </th>
        <th>
            @Localizer["Currentlyallocated"]:
        </th>
        <th>
            <div class="dropdown">
                <button class="btn btn-secondary dropdown-toggle" type="button" id="dropdownMenuButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">

                    @Localizer["Filters"]:
                </button>
                <div class="dropdown-menu scrollable-menu" aria-labelledby="dropdownMenuButton">

                    <dt class="col-sm-6">@Localizer["Placeofevent"]:</dt>
                    <dd class="col-sm-2">
                        @Html.TextBox("searchingPlace")
                    </dd>
                    <dt class="col-sm-6">@Localizer["Typeofactivities"]: </dt>
                    <dd class="col-sm-2">
                        @Html.TextBox("searchingActivity")
                    </dd>

                    <dt class="col-sm-6">@Localizer["Typeofevent"]: </dt>
                    <dd class="col-sm-2">
                        @Html.TextBox("searchingType")
                    </dd>
                    <dt class="col-sm-6">@Localizer["Allocatedvolunteers"]: </dt>
                    <dd class="col-sm-2">
                        @Html.TextBox("searchingVolunteers")
                    </dd>
                    <dt class="col-sm-6">@Localizer["Allocatedsponsors"]:</dt>
                    <dd class="col-sm-2">
                        @Html.TextBox("searchingSponsor")
                    </dd>
                    <dt class="col-sm-6">@Localizer["Inntinf"]: </dt>
                    <dd class="col-sm-2">
                        <input type="date" name="lowerdate">
                    </dd>
                    <dt class="col-sm-6">@Localizer["intsuo"]: </dt>
                    <dd class="col-sm-2">
                        <input type="date" name="upperdate">
                    </dd>
                </div>

                <button type="submit" class="btn btn-primary">
                    <span class="glyphicon glyphicon-search" aria-hidden="true"></span> @Localizer["NameOfEvent"]
                </button>
            </div>
        </th>

        <th></th>
    </tr>

    @if (Model.Events.Count() == 0)
    {
        <tr>
            <td colspan="3 " style="color:red">
                @Localizer["IndexMessage"]
            </td>
        </tr>
    }
    else
    {
        foreach (var item in Model.Events)
        {

            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.NameOfEvent)
                </td>

                <td>
                    @Html.DisplayFor(modelItem => item.DateOfEvent)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.NumberOfVolunteersNeeded)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.NumberAllocatedVolunteers)
                </td>

                <td>
                    <a href=@Url.Action("Edit", new { id = item._id })><img src="~/Resources/edit.jpg" width="40" height="40" title=@Localizer["Edit"]></a> |
                    <a href=@Url.Action("Details", new { id = item._id })><img src="~/Resources/detali.jpg" width="40" height="40" title=@Localizer["Details"]></a> |
                    <a href=@Url.Action("Delete", new { id = item._id })><img src="~/Resources/delete.jpg" width="40" height="40" title=@Localizer["Delete"]> </a>|
                    <a href=@Url.Action("VolunteerAllocation", new { id = item._id })><img src="~/Resources/vol.jpg" width="40" height="40" title=@Localizer["VolunteerAllocation"]></a> |
                    <a href=@Url.Action("SponsorAllocation", new { id = item._id })><img src="~/Resources/sponsor.jpg" width="40" height="40" title=@Localizer["SponsorAllocation"]></a>
                </td>
            </tr>
        }
    }
</table>
}