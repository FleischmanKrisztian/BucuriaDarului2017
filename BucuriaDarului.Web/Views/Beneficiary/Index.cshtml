@model BucuriaDarului.Contexts.BeneficiaryContexts.BeneficiariesMainDisplayIndexResponse
@using Microsoft.AspNetCore.Mvc.Localization
@inject IViewLocalizer Localizer
@{
    ViewData["Title"] = "Index";
    

}
<head>
    <style>

        .pagination {
            display: inline-block;
            width: 800px;
        }
        .dropdown-menu {
            width: 500px !important;
        }
            .pagination a {
                color: black;
                float: left;
                padding: 8px 16px;
                text-decoration: none;
                border-radius: 5px;
                border: 1px solid #ddd; /* Gray */
                transition: background-color .3s;
            }

                .pagination a.active {
                    background-color: red;
                    color: red;
                    border-radius: 5px;
                }

                .pagination a:hover:not(.active) {
                    background-color: #ddd;
                }

                .pagination a:first-child {
                    border-top-left-radius: 5px;
                    border-bottom-left-radius: 5px;
                }

                .pagination a:last-child {
                    border-top-right-radius: 5px;
                    border-bottom-right-radius: 5px;
                }

        .scrollable-menu {
            height: auto;
            max-height: 200px;
            overflow-x: hidden;
        }
    </style>
</head>
<h2>
    @Localizer["Beneficiaries"] <small> (@Model.TotalBeneficiaries)</small>
</h2>


@using (Html.BeginForm("Index", "Beneficiary", FormMethod.Get))
{<div>

        <a href=@Url.Action( "Create")><img src="~/Resources/new_beneficiary.png" width="40" height="40" title=@Localizer["CreateNew"]></a>
        <a href=@Url.Action("CsvExporter", new { stringOfIDs = Model.StringOfIDs })><img src="~/Resources/csv.png" width="40" height="40" title=@Localizer["ExportToCsv"]></a>
        <a href=@Url.Action("Import")><img src="~/Resources/import-csv.png" width="40" height="40" title=@Localizer["UploadFromCsv"]></a>

        <br />
    </div>
    <p>
        <div class="pagination">
            <pre style="white-space:pre-wrap;">
            @{
                int maxpage = (@Model.TotalBeneficiaries / Model.PagingData.NrOfDocumentsPerPage) + 1;
                if (@Model.TotalBeneficiaries % Model.PagingData.NrOfDocumentsPerPage == 0 && @Model.TotalBeneficiaries != 0)
                {
                    maxpage--;
                }

                if (Model.PagingData.CurrentPage == 1)
                {
                    @Html.ActionLink("1", "Index", new { page = 1, sortOrder = Model.FilterData.SortOrder.SortOrder, searching = Model.FilterData.BeneficiaryName, hasContract = Model.FilterData.HasContract, active = Model.FilterData.Active, homeless = Model.FilterData.Homeless, lowerDate = Model.FilterData.LowerDate, upperDate = Model.FilterData.UpperDate, weeklyPackage = Model.FilterData.WeeklyPackage, canteen = Model.FilterData.Canteen, homeDelivery = Model.FilterData.HomeDelivery, searchingDriver = Model.FilterData.SearchingDriver, HasGDPRAgreement = Model.FilterData.HasGDPRAgreement, searchingAddress = Model.FilterData.SearchingAddress, hasID = Model.FilterData.HasID, searchingNumberOfPortions = Model.FilterData.SearchingNumberOfPortions, searchingComments = Model.FilterData.SearchingComments, searchingBirthPlace = Model.FilterData.SearchingBirthPlace, searchingStudies = Model.FilterData.SearchingStudies, searchingPO = Model.FilterData.SearchingPO, searchingSeniority = Model.FilterData.SearchingSeniority, searchingHealthState = Model.FilterData.SearchingHealthState, searchingAddictions = Model.FilterData.SearchingAddictions, searchingMarried = Model.FilterData.SearchingMarried, searchingHealthInsurance = Model.FilterData.SearchingHealthInsurance, searchingHealthCard = Model.FilterData.SearchingHealthCard, searchingHasHome = Model.FilterData.SearchingHasHome, searchingIncome = Model.FilterData.SearchingIncome, searchingExpenses = Model.FilterData.SearchingExpenses, gender = Model.FilterData.Gender, activeTill = Model.FilterData.ActiveTill, activeSince = Model.FilterData.ActiveSince }, new { Style = "background-color:lightgray;  color:black; border-radius: 5px;" })
                }
                else
                {
                    @Html.ActionLink("1", "Index", new { page = 1, sortOrder = Model.FilterData.SortOrder.SortOrder, searching = Model.FilterData.BeneficiaryName, hasContract = Model.FilterData.HasContract, active = Model.FilterData.Active, homeless = Model.FilterData.Homeless, lowerDate = Model.FilterData.LowerDate, upperDate = Model.FilterData.UpperDate, weeklyPackage = Model.FilterData.WeeklyPackage, canteen = Model.FilterData.Canteen, homeDelivery = Model.FilterData.HomeDelivery, searchingDriver = Model.FilterData.SearchingDriver, HasGDPRAgreement = Model.FilterData.HasGDPRAgreement, searchingAddress = Model.FilterData.SearchingAddress, hasID = Model.FilterData.HasID, searchingNumberOfPortions = Model.FilterData.SearchingNumberOfPortions, searchingComments = Model.FilterData.SearchingComments, searchingBirthPlace = Model.FilterData.SearchingBirthPlace, searchingStudies = Model.FilterData.SearchingStudies, searchingPO = Model.FilterData.SearchingPO, searchingSeniority = Model.FilterData.SearchingSeniority, searchingHealthState = Model.FilterData.SearchingHealthState, searchingAddictions = Model.FilterData.SearchingAddictions, searchingMarried = Model.FilterData.SearchingMarried, searchingHealthInsurance = Model.FilterData.SearchingHealthInsurance, searchingHealthCard = Model.FilterData.SearchingHealthCard, searchingHasHome = Model.FilterData.SearchingHasHome, searchingIncome = Model.FilterData.SearchingIncome, searchingExpenses = Model.FilterData.SearchingExpenses, gender = Model.FilterData.Gender, activeTill = Model.FilterData.ActiveTill, activeSince = Model.FilterData.ActiveSince })
                }
                if (Model.PagingData.CurrentPage >= 5)
                {
                    @Html.ActionLink("<<", "Index", new { page = Model.PagingData.CurrentPage - 1, sortOrder = Model.FilterData.SortOrder.SortOrder, searching = Model.FilterData.BeneficiaryName, hasContract = Model.FilterData.HasContract, active = Model.FilterData.Active, homeless = Model.FilterData.Homeless, lowerDate = Model.FilterData.LowerDate, upperDate = Model.FilterData.UpperDate, weeklyPackage = Model.FilterData.WeeklyPackage, canteen = Model.FilterData.Canteen, homeDelivery = Model.FilterData.HomeDelivery, searchingDriver = Model.FilterData.SearchingDriver, HasGDPRAgreement = Model.FilterData.HasGDPRAgreement, searchingAddress = Model.FilterData.SearchingAddress, hasID = Model.FilterData.HasID, searchingNumberOfPortions = Model.FilterData.SearchingNumberOfPortions, searchingComments = Model.FilterData.SearchingComments, searchingBirthPlace = Model.FilterData.SearchingBirthPlace, searchingStudies = Model.FilterData.SearchingStudies, searchingPO = Model.FilterData.SearchingPO, searchingSeniority = Model.FilterData.SearchingSeniority, searchingHealthState = Model.FilterData.SearchingHealthState, searchingAddictions = Model.FilterData.SearchingAddictions, searchingMarried = Model.FilterData.SearchingMarried, searchingHealthInsurance = Model.FilterData.SearchingHealthInsurance, searchingHealthCard = Model.FilterData.SearchingHealthCard, searchingHasHome = Model.FilterData.SearchingHasHome, searchingIncome = Model.FilterData.SearchingIncome, searchingExpenses = Model.FilterData.SearchingExpenses, gender = Model.FilterData.Gender, activeTill = Model.FilterData.ActiveTill, activeSince = Model.FilterData.ActiveSince })
                }
                if (Model.PagingData.CurrentPage > 3)
                {
                    @Html.ActionLink((Model.PagingData.CurrentPage - 2).ToString(), "Index", new { page = Model.PagingData.CurrentPage - 2, sortOrder = Model.FilterData.SortOrder.SortOrder, searching = Model.FilterData.BeneficiaryName, hasContract = Model.FilterData.HasContract, active = Model.FilterData.Active, homeless = Model.FilterData.Homeless, lowerDate = Model.FilterData.LowerDate, upperDate = Model.FilterData.UpperDate, weeklyPackage = Model.FilterData.WeeklyPackage, canteen = Model.FilterData.Canteen, homeDelivery = Model.FilterData.HomeDelivery, searchingDriver = Model.FilterData.SearchingDriver, HasGDPRAgreement = Model.FilterData.HasGDPRAgreement, searchingAddress = Model.FilterData.SearchingAddress, hasID = Model.FilterData.HasID, searchingNumberOfPortions = Model.FilterData.SearchingNumberOfPortions, searchingComments = Model.FilterData.SearchingComments, searchingBirthPlace = Model.FilterData.SearchingBirthPlace, searchingStudies = Model.FilterData.SearchingStudies, searchingPO = Model.FilterData.SearchingPO, searchingSeniority = Model.FilterData.SearchingSeniority, searchingHealthState = Model.FilterData.SearchingHealthState, searchingAddictions = Model.FilterData.SearchingAddictions, searchingMarried = Model.FilterData.SearchingMarried, searchingHealthInsurance = Model.FilterData.SearchingHealthInsurance, searchingHealthCard = Model.FilterData.SearchingHealthCard, searchingHasHome = Model.FilterData.SearchingHasHome, searchingIncome = Model.FilterData.SearchingIncome, searchingExpenses = Model.FilterData.SearchingExpenses, gender = Model.FilterData.Gender, activeTill = Model.FilterData.ActiveTill, activeSince = Model.FilterData.ActiveSince })
                }
                if (Model.PagingData.CurrentPage > 2)
                {
                    @Html.ActionLink((Model.PagingData.CurrentPage - 1).ToString(), "Index", new { page = Model.PagingData.CurrentPage - 1, sortOrder = Model.FilterData.SortOrder.SortOrder, searching = Model.FilterData.BeneficiaryName, hasContract = Model.FilterData.HasContract, active = Model.FilterData.Active, homeless = Model.FilterData.Homeless, lowerDate = Model.FilterData.LowerDate, upperDate = Model.FilterData.UpperDate, weeklyPackage = Model.FilterData.WeeklyPackage, canteen = Model.FilterData.Canteen, homeDelivery = Model.FilterData.HomeDelivery, searchingDriver = Model.FilterData.SearchingDriver, HasGDPRAgreement = Model.FilterData.HasGDPRAgreement, searchingAddress = Model.FilterData.SearchingAddress, hasID = Model.FilterData.HasID, searchingNumberOfPortions = Model.FilterData.SearchingNumberOfPortions, searchingComments = Model.FilterData.SearchingComments, searchingBirthPlace = Model.FilterData.SearchingBirthPlace, searchingStudies = Model.FilterData.SearchingStudies, searchingPO = Model.FilterData.SearchingPO, searchingSeniority = Model.FilterData.SearchingSeniority, searchingHealthState = Model.FilterData.SearchingHealthState, searchingAddictions = Model.FilterData.SearchingAddictions, searchingMarried = Model.FilterData.SearchingMarried, searchingHealthInsurance = Model.FilterData.SearchingHealthInsurance, searchingHealthCard = Model.FilterData.SearchingHealthCard, searchingHasHome = Model.FilterData.SearchingHasHome, searchingIncome = Model.FilterData.SearchingIncome, searchingExpenses = Model.FilterData.SearchingExpenses, gender = Model.FilterData.Gender, activeTill = Model.FilterData.ActiveTill, activeSince = Model.FilterData.ActiveSince })
                }
                if (Model.PagingData.CurrentPage != 1 && Model.PagingData.CurrentPage != maxpage)
                {
                    @Html.ActionLink(Model.PagingData.CurrentPage.ToString(), "Index", new { page = Model.PagingData.CurrentPage, sortOrder = Model.FilterData.SortOrder.SortOrder, searching = Model.FilterData.BeneficiaryName, hasContract = Model.FilterData.HasContract, active = Model.FilterData.Active, homeless = Model.FilterData.Homeless, lowerDate = Model.FilterData.LowerDate, upperDate = Model.FilterData.UpperDate, weeklyPackage = Model.FilterData.WeeklyPackage, canteen = Model.FilterData.Canteen, homeDelivery = Model.FilterData.HomeDelivery, searchingDriver = Model.FilterData.SearchingDriver, HasGDPRAgreement = Model.FilterData.HasGDPRAgreement, searchingAddress = Model.FilterData.SearchingAddress, hasID = Model.FilterData.HasID, searchingNumberOfPortions = Model.FilterData.SearchingNumberOfPortions, searchingComments = Model.FilterData.SearchingComments, searchingBirthPlace = Model.FilterData.SearchingBirthPlace, searchingStudies = Model.FilterData.SearchingStudies, searchingPO = Model.FilterData.SearchingPO, searchingSeniority = Model.FilterData.SearchingSeniority, searchingHealthState = Model.FilterData.SearchingHealthState, searchingAddictions = Model.FilterData.SearchingAddictions, searchingMarried = Model.FilterData.SearchingMarried, searchingHealthInsurance = Model.FilterData.SearchingHealthInsurance, searchingHealthCard = Model.FilterData.SearchingHealthCard, searchingHasHome = Model.FilterData.SearchingHasHome, searchingIncome = Model.FilterData.SearchingIncome, searchingExpenses = Model.FilterData.SearchingExpenses, gender = Model.FilterData.Gender, activeTill = Model.FilterData.ActiveTill, activeSince = Model.FilterData.ActiveSince }, new { Style = "background-color:lightgray;  color:black; border-radius: 5px;" })
                }
                if (Model.PagingData.CurrentPage < maxpage - 1)
                {
                    @Html.ActionLink((Model.PagingData.CurrentPage + 1).ToString(), "Index", new { page = Model.PagingData.CurrentPage + 1, sortOrder = Model.FilterData.SortOrder.SortOrder, searching = Model.FilterData.BeneficiaryName, hasContract = Model.FilterData.HasContract, active = Model.FilterData.Active, homeless = Model.FilterData.Homeless, lowerDate = Model.FilterData.LowerDate, upperDate = Model.FilterData.UpperDate, weeklyPackage = Model.FilterData.WeeklyPackage, canteen = Model.FilterData.Canteen, homeDelivery = Model.FilterData.HomeDelivery, searchingDriver = Model.FilterData.SearchingDriver, HasGDPRAgreement = Model.FilterData.HasGDPRAgreement, searchingAddress = Model.FilterData.SearchingAddress, hasID = Model.FilterData.HasID, searchingNumberOfPortions = Model.FilterData.SearchingNumberOfPortions, searchingComments = Model.FilterData.SearchingComments, searchingBirthPlace = Model.FilterData.SearchingBirthPlace, searchingStudies = Model.FilterData.SearchingStudies, searchingPO = Model.FilterData.SearchingPO, searchingSeniority = Model.FilterData.SearchingSeniority, searchingHealthState = Model.FilterData.SearchingHealthState, searchingAddictions = Model.FilterData.SearchingAddictions, searchingMarried = Model.FilterData.SearchingMarried, searchingHealthInsurance = Model.FilterData.SearchingHealthInsurance, searchingHealthCard = Model.FilterData.SearchingHealthCard, searchingHasHome = Model.FilterData.SearchingHasHome, searchingIncome = Model.FilterData.SearchingIncome, searchingExpenses = Model.FilterData.SearchingExpenses, gender = Model.FilterData.Gender, activeTill = Model.FilterData.ActiveTill, activeSince = Model.FilterData.ActiveSince })
                }
                if (Model.PagingData.CurrentPage < maxpage - 2)
                {
                    @Html.ActionLink((Model.PagingData.CurrentPage + 2).ToString(), "Index", new { page = Model.PagingData.CurrentPage + 2, sortOrder = Model.FilterData.SortOrder.SortOrder, searching = Model.FilterData.BeneficiaryName, hasContract = Model.FilterData.HasContract, active = Model.FilterData.Active, homeless = Model.FilterData.Homeless, lowerDate = Model.FilterData.LowerDate, upperDate = Model.FilterData.UpperDate, weeklyPackage = Model.FilterData.WeeklyPackage, canteen = Model.FilterData.Canteen, homeDelivery = Model.FilterData.HomeDelivery, searchingDriver = Model.FilterData.SearchingDriver, HasGDPRAgreement = Model.FilterData.HasGDPRAgreement, searchingAddress = Model.FilterData.SearchingAddress, hasID = Model.FilterData.HasID, searchingNumberOfPortions = Model.FilterData.SearchingNumberOfPortions, searchingComments = Model.FilterData.SearchingComments, searchingBirthPlace = Model.FilterData.SearchingBirthPlace, searchingStudies = Model.FilterData.SearchingStudies, searchingPO = Model.FilterData.SearchingPO, searchingSeniority = Model.FilterData.SearchingSeniority, searchingHealthState = Model.FilterData.SearchingHealthState, searchingAddictions = Model.FilterData.SearchingAddictions, searchingMarried = Model.FilterData.SearchingMarried, searchingHealthInsurance = Model.FilterData.SearchingHealthInsurance, searchingHealthCard = Model.FilterData.SearchingHealthCard, searchingHasHome = Model.FilterData.SearchingHasHome, searchingIncome = Model.FilterData.SearchingIncome, searchingExpenses = Model.FilterData.SearchingExpenses, gender = Model.FilterData.Gender, activeTill = Model.FilterData.ActiveTill, activeSince = Model.FilterData.ActiveSince })
                }
                if (Model.PagingData.CurrentPage < maxpage - 3)
                {
                    @Html.ActionLink(">>", "Index", new { page = Model.PagingData.CurrentPage + 1, sortOrder = Model.FilterData.SortOrder.SortOrder, searching = Model.FilterData.BeneficiaryName, hasContract = Model.FilterData.HasContract, active = Model.FilterData.Active, homeless = Model.FilterData.Homeless, lowerDate = Model.FilterData.LowerDate, upperDate = Model.FilterData.UpperDate, weeklyPackage = Model.FilterData.WeeklyPackage, canteen = Model.FilterData.Canteen, homeDelivery = Model.FilterData.HomeDelivery, searchingDriver = Model.FilterData.SearchingDriver, HasGDPRAgreement = Model.FilterData.HasGDPRAgreement, searchingAddress = Model.FilterData.SearchingAddress, hasID = Model.FilterData.HasID, searchingNumberOfPortions = Model.FilterData.SearchingNumberOfPortions, searchingComments = Model.FilterData.SearchingComments, searchingBirthPlace = Model.FilterData.SearchingBirthPlace, searchingStudies = Model.FilterData.SearchingStudies, searchingPO = Model.FilterData.SearchingPO, searchingSeniority = Model.FilterData.SearchingSeniority, searchingHealthState = Model.FilterData.SearchingHealthState, searchingAddictions = Model.FilterData.SearchingAddictions, searchingMarried = Model.FilterData.SearchingMarried, searchingHealthInsurance = Model.FilterData.SearchingHealthInsurance, searchingHealthCard = Model.FilterData.SearchingHealthCard, searchingHasHome = Model.FilterData.SearchingHasHome, searchingIncome = Model.FilterData.SearchingIncome, searchingExpenses = Model.FilterData.SearchingExpenses, gender = Model.FilterData.Gender, activeTill = Model.FilterData.ActiveTill, activeSince = Model.FilterData.ActiveSince })
                }
                if (maxpage != 1 && Model.PagingData.CurrentPage == maxpage)
                {
                    @Html.ActionLink(maxpage.ToString(), "Index", new { page = maxpage, sortOrder = Model.FilterData.SortOrder.SortOrder, searching = Model.FilterData.BeneficiaryName, hasContract = Model.FilterData.HasContract, active = Model.FilterData.Active, homeless = Model.FilterData.Homeless, lowerDate = Model.FilterData.LowerDate, upperDate = Model.FilterData.UpperDate, weeklyPackage = Model.FilterData.WeeklyPackage, canteen = Model.FilterData.Canteen, homeDelivery = Model.FilterData.HomeDelivery, searchingDriver = Model.FilterData.SearchingDriver, HasGDPRAgreement = Model.FilterData.HasGDPRAgreement, searchingAddress = Model.FilterData.SearchingAddress, hasID = Model.FilterData.HasID, searchingNumberOfPortions = Model.FilterData.SearchingNumberOfPortions, searchingComments = Model.FilterData.SearchingComments, searchingBirthPlace = Model.FilterData.SearchingBirthPlace, searchingStudies = Model.FilterData.SearchingStudies, searchingPO = Model.FilterData.SearchingPO, searchingSeniority = Model.FilterData.SearchingSeniority, searchingHealthState = Model.FilterData.SearchingHealthState, searchingAddictions = Model.FilterData.SearchingAddictions, searchingMarried = Model.FilterData.SearchingMarried, searchingHealthInsurance = Model.FilterData.SearchingHealthInsurance, searchingHealthCard = Model.FilterData.SearchingHealthCard, searchingHasHome = Model.FilterData.SearchingHasHome, searchingIncome = Model.FilterData.SearchingIncome, searchingExpenses = Model.FilterData.SearchingExpenses, gender = Model.FilterData.Gender, activeTill = Model.FilterData.ActiveTill, activeSince = Model.FilterData.ActiveSince }, new { Style = "background-color:lightgray;  color:black; border-radius: 5px;" })
                }
                else if (maxpage != 1)
                {
                    @Html.ActionLink(maxpage.ToString(), "Index", new { page = maxpage, sortOrder = Model.FilterData.SortOrder.SortOrder, searching = Model.FilterData.BeneficiaryName, hasContract = Model.FilterData.HasContract, active = Model.FilterData.Active, homeless = Model.FilterData.Homeless, lowerDate = Model.FilterData.LowerDate, upperDate = Model.FilterData.UpperDate, weeklyPackage = Model.FilterData.WeeklyPackage, canteen = Model.FilterData.Canteen, homeDelivery = Model.FilterData.HomeDelivery, searchingDriver = Model.FilterData.SearchingDriver, HasGDPRAgreement = Model.FilterData.HasGDPRAgreement, searchingAddress = Model.FilterData.SearchingAddress, hasID = Model.FilterData.HasID, searchingNumberOfPortions = Model.FilterData.SearchingNumberOfPortions, searchingComments = Model.FilterData.SearchingComments, searchingBirthPlace = Model.FilterData.SearchingBirthPlace, searchingStudies = Model.FilterData.SearchingStudies, searchingPO = Model.FilterData.SearchingPO, searchingSeniority = Model.FilterData.SearchingSeniority, searchingHealthState = Model.FilterData.SearchingHealthState, searchingAddictions = Model.FilterData.SearchingAddictions, searchingMarried = Model.FilterData.SearchingMarried, searchingHealthInsurance = Model.FilterData.SearchingHealthInsurance, searchingHealthCard = Model.FilterData.SearchingHealthCard, searchingHasHome = Model.FilterData.SearchingHasHome, searchingIncome = Model.FilterData.SearchingIncome, searchingExpenses = Model.FilterData.SearchingExpenses, gender = Model.FilterData.Gender, activeTill = Model.FilterData.ActiveTill, activeSince = Model.FilterData.ActiveSince })
                }
            }
            </pre>
        </div>
    </p>
    <a href=@Url.Action( "Index" ) class="btn btn-primary">@Localizer["Show all beneficiaries"]</a>
    <br />
    @if (Model.FilterData.BeneficiaryName!= null)
    {
        <div class="badge badge-primary text-wrap" style="width: 10rem; background-color:lightgrey; color:black ">
            @Localizer["Fullname"]:@Model.FilterData.BeneficiaryName
        </div>
    }
    @if (Model.FilterData.SearchingBirthPlace != null)
    {<div class="badge badge-primary text-wrap" style="width: 10rem; background-color:lightgrey; color:black ">
            @Localizer["Birthplace"]:@Model.FilterData.SearchingBirthPlace
            
        </div>
    }
    @if (Model.FilterData.Active != false)
    {<div class="badge badge-primary text-wrap" style="width: 10rem; background-color:lightgrey; color:black ">
    @Localizer["Active"]::@Model.FilterData.Active
</div>
    }
    @if (Model.FilterData.HasContract!= false)
    {<div class="badge badge-primary text-wrap" style="width: 10rem; background-color:lightgrey; color:black ">
            @Localizer["HasContract"]
        </div>
    }

    @if (Model.FilterData.Homeless != false)
    {<div class="badge badge-primary text-wrap" style="width: 10rem; background-color:lightgrey; color:black ">
            @Localizer["Homeless"]
        </div>
    }

    @if (Model.FilterData.WeeklyPackage != false)
    {<div class="badge badge-primary text-wrap" style="width: 10rem; background-color:lightgrey; color:black ">
            @Localizer["WeeklyPackage"]
        </div>
    }
    @if (Model.FilterData.Canteen!= false)
    {<div class="badge badge-primary text-wrap" style="width: 10rem; background-color:lightgrey; color:black ">
            @Localizer["Canteen"]
        </div>
    }

    @if (Model.FilterData.HomeDelivery != false)
    {<div class="badge badge-primary text-wrap" style="width: 10rem; background-color:lightgrey; color:black ">
            @Localizer["HomeDelivery"]
        </div>
    }

    @if (Model.FilterData.SearchingDriver != null)
    {<div class="badge badge-primary text-wrap" style="width: 10rem; background-color:lightgrey; color:black ">
            @Localizer["HomeDeliveryDriver"]:@Model.FilterData.SearchingDriver
        </div>
    }

    @if (Model.FilterData.HasGDPRAgreement != false)
    {<div class="badge badge-primary text-wrap" style="width: 10rem; background-color:lightgrey; color:black ">
            @Localizer["HasGDPRAgreement"]:@Model.FilterData.HasGDPRAgreement
        </div>
    }
    @if (Model.FilterData.SearchingAddress != null)
    {<div class="badge badge-primary text-wrap" style="width: 10rem; background-color:lightgrey; color:black ">
            @Localizer["Address"]:@Model.FilterData.SearchingAddress
        </div>
    }

    @if (Model.FilterData.HasID != false)
    {<div class="badge badge-primary text-wrap" style="width: 10rem; background-color:lightgrey; color:black ">
            @Localizer["HasID"]
        </div>
    }

    @if (Model.FilterData.SearchingNumberOfPortions != 0)
    {<div class="badge badge-primary text-wrap" style="width: 10rem; background-color:lightgrey; color:black ">
    @Localizer["NumberOfPortions"]:@Model.FilterData.SearchingNumberOfPortions
</div>
    }
    @if (Model.FilterData.SearchingComments != null)
    {<div class="badge badge-primary text-wrap" style="width: 10rem; background-color:lightgrey; color:black ">
    @Localizer["Comments"]:@Model.FilterData.SearchingComments
</div>
    }
    @if (Model.FilterData.SearchingStudies != null)
    {<div class="badge badge-primary text-wrap" style="width: 10rem; background-color:lightgrey; color:black ">
    @Localizer["Studies"]:@Model.FilterData.SearchingStudies
</div>
    }

    @if (Model.FilterData.SearchingPO != null)
    {<div class="badge badge-primary text-wrap" style="width: 10rem; background-color:lightgrey; color:black ">
    @Localizer["Profession&Occupation"]:@Model.FilterData.SearchingPO
</div>
    }
    @if (Model.FilterData.SearchingSeniority != null)
    {
<div class="badge badge-primary text-wrap" style="width: 10rem; background-color:lightgrey; color:black ">
    @Localizer["SeniorityInWorkField"]:@Model.FilterData.SearchingSeniority
</div>
    }

    @if (Model.FilterData.SearchingHealthState != null)
    {<div class="badge badge-primary text-wrap" style="width: 10rem; background-color:lightgrey; color:black ">
    @Localizer["HealthState&Disability&ChronicCondition"]:@Model.FilterData.SearchingHealthState
</div>
    }
    @if (Model.FilterData.SearchingAddictions != null)
    {<div class="badge badge-primary text-wrap" style="width: 10rem; background-color:lightgrey; color:black ">
    @Localizer["Addictions"]: @Model.FilterData.SearchingAddictions
</div>
    }
    @if (Model.FilterData.SearchingMarried != null)
    {<div class="badge badge-primary text-wrap" style="width: 10rem; background-color:lightgrey; color:black ">
            @Localizer["Married&SpouseName"]
        </div>
    }

    @if (Model.FilterData.SearchingHealthInsurance != false)
    {<div class="badge badge-primary text-wrap" style="width: 10rem; background-color:lightgrey; color:black ">
            @Localizer["HealthInsurance"]
        </div>
    }
    @if (Model.FilterData.SearchingHealthCard != false)
    {<div class="badge badge-primary text-wrap" style="width: 10rem; background-color:lightgrey; color:black ">
            @Localizer["HealthCard"]
        </div>
    }

    @if (Model.FilterData.SearchingHousingType != null)
    {<div class="badge badge-primary text-wrap" style="width: 10rem; background-color:lightgrey; color:black ">
    @Localizer["HousingType"]:@Model.FilterData.SearchingHousingType
</div>
    }
    @if (Model.FilterData.SearchingIncome != null)
    {<div class="badge badge-primary text-wrap" style="width: 10rem; background-color:lightgrey; color:black ">
            @Localizer["Income"]:@Model.FilterData.SearchingIncome
        </div>
    }

    @if (Model.FilterData.SearchingExpenses != null)
    {<div class="badge badge-primary text-wrap" style="width: 10rem; background-color:lightgrey; color:black ">
            @Localizer["Expenses"]:@Model.FilterData.SearchingExpenses
        </div>
    }
    @if (Model.FilterData.Gender != null)
    {<div class="badge badge-primary text-wrap" style="width: 10rem; background-color:lightgrey; color:black ">
    @Localizer["Gender"]:@Model.FilterData.Gender
</div>
    }

    @if (Model.FilterData.LowerDate != null && Model.FilterData.LowerDate.Year > DateTime.MinValue.Year)
    {<div class="badge badge-primary text-wrap" style="width: 10rem; background-color:lightgrey; color:black ">
            @Localizer["BornAfter"]:@Model.FilterData.LowerDate
        </div>
    }@if (Model.FilterData.UpperDate != null && Model.FilterData.UpperDate.Year > DateTime.MinValue.Year)
    {<div class="badge badge-primary text-wrap" style="width: 10rem; background-color:lightgrey; color:black ">
            @Localizer["BornBefore"]:@Model.FilterData.UpperDate
        </div>
    }@if (Model.FilterData.ActiveSince != null && Model.FilterData.ActiveSince.Year > DateTime.MinValue.Year)
    {<div class="badge badge-primary text-wrap" style="width: 10rem; background-color:lightgrey; color:black ">
            @Localizer["LowerDate"]:@Model.FilterData.ActiveSince
        </div>
    }
    @if (Model.FilterData.ActiveTill != null&& Model.FilterData.ActiveTill.Year > DateTime.MinValue.Year)
    {<div class="badge badge-primary text-wrap" style="width: 10rem; background-color:lightgrey; color:black ">
    @Localizer["UpperDate"]:@Model.FilterData.ActiveTill
</div>
    }
    <table class="table">

        <tr>
            <th>
                <a href=@Url.Action("Index", new { sortOrder =  Model.FilterData.SortOrder.FullnameSort, searching = Model.FilterData.BeneficiaryName, hasContract = Model.FilterData.HasContract, Active = Model.FilterData.Active, homeless = Model.FilterData.Homeless, lowerDate = Model.FilterData.LowerDate, upperDate = Model.FilterData.UpperDate  })>@Localizer["Fullname"]</a>

                @Html.TextBox("searching")
            </th>

            <th>
                <a href=@Url.Action("Index", new { sortOrder = Model.FilterData.SortOrder.Activesort, searching = Model.FilterData.BeneficiaryName, hasContract = Model.FilterData.HasContract, Active = Model.FilterData.Active, homeless = Model.FilterData.Homeless, lowerDate = Model.FilterData.LowerDate, upperDate = Model.FilterData.UpperDate })>@Localizer["Active"]</a>
                <dd class="col-sm-2">
                    @Html.CheckBox("Active")
                </dd>
            </th>
            <th>
                <dt>
                    <a href=@Url.Action("Index", new { sortOrder = Model.FilterData.SortOrder.Gendersort, searching = Model.FilterData.BeneficiaryName, hasContract = Model.FilterData.HasContract, Active = Model.FilterData.Active, homeless = Model.FilterData.Homeless, lowerDate = Model.FilterData.LowerDate, upperDate = Model.FilterData.UpperDate })>@Localizer["Gender"]</a>
                </dt>
                <dd></dd>
            </th>
            <th>
                @Localizer["WeeklyPackage"]
                <dd class="col-sm-2">
                    @Html.CheckBox("WeeklyPackage")
                </dd>
            </th>
            <th>
                @Localizer["Canteen"]
                <dd class="col-sm-2">
                    @Html.CheckBox("Canteen")
                </dd>
            </th>
            <th valign="top">
                <dt>
                    <a href=@Url.Action("Index", new { sortOrder =  Model.FilterData.SortOrder.DateSortParm, searching = Model.FilterData.BeneficiaryName, hasContract = Model.FilterData.HasContract, Active = Model.FilterData.Active, homeless = Model.FilterData.Homeless, lowerDate = Model.FilterData.LowerDate, upperDate = Model.FilterData.UpperDate })>@Localizer["Birthdate"]</a>
                </dt>
                <dd></dd>
            </th>
            <th>
                <div class="dropdown">
                    <button class="btn btn-secondary dropdown-toggle" type="button" id="dropdownMenuButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">

                        @Localizer["Filters"]:
                    </button>

                    <div class="dropdown-menu scrollable-menu" aria-labelledby="dropdownMenuButton" style="width: 200px;overflow: scroll;">
                        <dt class="col-sm-8">@Localizer["Homeless"]: </dt>
                        <dd class="col-sm-2">
                            @Html.CheckBox("Homeless")
                        </dd>

                        <dt class="col-sm-8">@Localizer["BornAfter"]: </dt>
                        <dd class="col-sm-2">
                            <input type="date" name="lowerdate">
                        </dd>
                        <dt class="col-sm-8">@Localizer["BornBefore"]: </dt>
                        <dd class="col-sm-2">
                            <input type="date" name="upperdate">
                        </dd>

                        <dt class="col-sm-8">@Localizer["HomeDelivery"]: </dt>
                        <dd class="col-sm-2">
                            @Html.CheckBox("HomeDelivery")
                        </dd>
                        <dt class="col-sm-8">@Localizer["HomeDeliveryDriver"]:</dt>
                        <dd class="col-sm-2">
                            @Html.TextBox("searchingDriver")
                        </dd>
                        <dt class="col-sm-8">@Localizer["HasGDPRAgreement"]:</dt>
                        <dd class="col-sm-2">
                            @Html.CheckBox("HasGDPRAgreement")
                        </dd>
                        <dt class="col-sm-8">@Localizer["Address"]: </dt>
                        <dd class="col-sm-2">
                            @Html.TextBox("searchingAddress")
                        </dd>

                        <dt class="col-sm-8">@Localizer["HasID"]: </dt>
                        <dd class="col-sm-2">
                            @Html.CheckBox("HasID")
                        </dd>
                        <dt class="col-sm-8">@Localizer["NumberOfPortions"]: </dt>
                        <dd class="col-sm-2">
                            @Html.TextBox("searchingNumberOfPortions")
                        </dd>
                        <dt class="col-sm-8">@Localizer["Comments"]:</dt>
                        <dd class="col-sm-2">
                            @Html.TextBox("searchingComments")
                        </dd>
                        <dt class="col-sm-8">@Localizer["LowerDate"]: </dt>
                        <dd class="col-sm-2">
                            <input type="date" name="activesince">
                        </dd>
                        <dt class="col-sm-8">@Localizer["UpperDate"]: </dt>
                        <dd class="col-sm-2">
                            <input type="date" name="activetill">
                        </dd>
                        <dt class="col-sm-8">@Localizer["Birthplace"]:</dt>
                        <dd class="col-sm-2">
                            @Html.TextBox("searchingBirthPlace")
                        </dd>
                        <dt class="col-sm-8">@Localizer["Studies"]:</dt>
                        <dd class="col-sm-2">
                            @Html.TextBox("searchingStudies")
                        </dd>
                        <dt class="col-sm-8">@Localizer["Profesion&Occupation"]: </dt>
                        <dd class="col-sm-2">
                            @Html.TextBox("searchingPO")
                        </dd>
                        <dt class="col-sm-8">@Localizer["SeniorityInWorkField"]: </dt>
                        <dd class="col-sm-2">
                            @Html.TextBox("searchingSeniority")
                        </dd>
                        <dt class="col-sm-8">@Localizer["HealthState&Disalility&ChronicCondition"]: </dt>
                        <dd class="col-sm-2">
                            @Html.TextBox("searchingHealthState")
                        </dd>
                        <dt class="col-sm-8">@Localizer["Addictions"]:</dt>
                        <dd class="col-sm-2">
                            @Html.TextBox("searchingAddictions")
                        </dd>
                        <dt class="col-sm-8">@Localizer["Married&SpouseName"]:</dt>
                        <dd class="col-sm-2">
                            @Html.TextBox("searchingMarried")
                        </dd>
                        <dt class="col-sm-8">@Localizer["HasHealthInsurance"]: </dt>
                        <dd class="col-sm-2">
                            @Html.CheckBox("searchingHealthInsurance")
                        </dd>
                        <dt class="col-sm-8">@Localizer["HasHealthCard"]:</dt>
                        <dd class="col-sm-2">
                            @Html.CheckBox("searchingHealthCard")
                        </dd>
                        <dt class="col-sm-8">@Localizer["HousingType"]:</dt>
                        <dd class="col-sm-2">
                            @Html.TextBox("searchingHousingType")
                        </dd>

                        <dt class="col-sm-8">@Localizer["Income"]: </dt>
                        <dd class="col-sm-2">
                            @Html.TextBox("searchingIncome")
                        </dd>
                        <dt class="col-sm-8">@Localizer["Expenses"]:</dt>
                        <dd class="col-sm-2">
                            @Html.TextBox("searchingExpenses")
                        </dd>
                        <dt class="col-sm-8">@Localizer["Gender"]: </dt>
                        <dd class="col-sm-12">

                            <input type="radio" name="gender" value="All" text="All" checked="checked" />@Localizer["All"]
                            <input type="radio" name="gender" value="Male" text="Male" />@Localizer["Male"]
                            <input type="radio" name="gender" value="Female" text="Female" />@Localizer["Female"]
                        </dd>
                    </div>
                    <button type="submit" class="btn btn-primary">
                        <span class="glyphicon glyphicon-search" aria-hidden="true"></span> @Localizer["Search"]
                    </button>
                    <dd></dd>
                </div>
            </th>
            <th></th>
        </tr>

    @if (Model.EmptyDatabase)
    {
        <tr>
            <td colspan="3 " style="color:red">
                @Localizer["EmptyDatabase"]
            </td>
        </tr>
    }
    else if (Model.TotalBeneficiaries == 0)
    {
        <tr>
            <td colspan="3 " style="color:red">
                @Localizer["NoDocumentsMatchingCriteria"]
            </td>
        </tr>
    }
        else
        {
            @foreach (var item in Model.Beneficiaries)
            {
                <tr>
                    <td>
                        @Html.DisplayFor(modelItem => item.Fullname)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Active)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.PersonalInfo.Gender)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.WeeklyPackage)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Canteen)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.PersonalInfo.Birthdate)
                    </td>

                    <td>
                        <a href=@Url.Action("Edit", new { id = item.Id })><img src="~/Resources/edit.jpg" width="40" height="40" title=@Localizer["Edit"]></a> |
                        <a href=@Url.Action("Details", new { id = item.Id })><img src="~/Resources/detali.jpg" width="40" height="40" title=@Localizer["Details"]></a> |
                        <a href=@Url.Action("Delete", new { id = item.Id })><img src="~/Resources/delete.jpg" width="40" height="40" title=@Localizer["Delete"]></a>
                        <a href=@Url.Action("Contracts", new { id = item.Id })><img src="~/Resources/contract.jpg" width="40" height="40" title=@Localizer["Contracts"]></a>
                    </td>
                </tr>
            }}
    </table>
}